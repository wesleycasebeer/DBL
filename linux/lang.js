/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lang = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,21],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[11,16,24,25,27],$V6=[1,41],$V7=[1,43],$V8=[21,22,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"file":3,"init_block":4,"cmd_block":5,"start":6,"T_COMMANDS":7,"T_COLON":8,"T_LBRACE":9,"commands":10,"T_RBRACE":11,"norm_cmd":12,"count_cmd":13,"rand_cmd":14,"pic_cmd":15,"T_NORM":16,"T_PERIOD":17,"T_ID":18,"T_LPAREN":19,"T_STRING":20,"T_COMMA":21,"T_RPAREN":22,"T_SEMIC":23,"T_COUNT":24,"T_RAND":25,"set_of_strings":26,"T_PICTURE":27,"T_INIT":28,"token_init":29,"client_init":30,"guild_init":31,"T_TOKEN":32,"T_ASSIGN":33,"T_CLIENT":34,"T_GUILD":35,"T_START":36,"count_lines":37,"T_NEWLINE":38,"T_STRING_CONSTANT":39,"T_IDENTIFIER":40,"$accept":0,"$end":1},
terminals_: {2:"error",7:"T_COMMANDS",8:"T_COLON",9:"T_LBRACE",11:"T_RBRACE",16:"T_NORM",17:"T_PERIOD",19:"T_LPAREN",21:"T_COMMA",22:"T_RPAREN",23:"T_SEMIC",24:"T_COUNT",25:"T_RAND",27:"T_PICTURE",28:"T_INIT",32:"T_TOKEN",33:"T_ASSIGN",34:"T_CLIENT",35:"T_GUILD",36:"T_START",38:"T_NEWLINE",39:"T_STRING_CONSTANT",40:"T_IDENTIFIER"},
productions_: [0,[3,3],[3,2],[5,5],[10,1],[10,2],[10,1],[10,2],[10,1],[10,2],[10,1],[10,2],[12,9],[12,7],[13,11],[13,9],[14,9],[14,7],[15,11],[15,9],[4,7],[29,4],[30,4],[31,4],[6,2],[26,2],[26,2],[37,1],[20,1],[18,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        deploy($$[$0-2].cli, $$[$0-2].gui, $$[$0-2].tok);
        begin($$[$0-2].tok);
        /*console.log("Bot is online...");*/
        /*console.log("Ctrl + C to stop.");*/
    
break;
case 4:

            normalCommand($$[$0].name, $$[$0].output, $$[$0].description);           
            //console.log("In norm_cmd 1\n");
        
break;
case 5:

            normalCommand($$[$0].name, $$[$0].output, $$[$0].description);
            //console.log("In nom_cmd 2\n");
        
break;
case 6:

            countCommand($$[$0].name, $$[$0].output1, $$[$0].output2, $$[$0].description);
            //console.log("In count_cmd 1\n");
        
break;
case 7:

            countCommand($$[$0].name, $$[$0].output1, $$[$0].output2, $$[$0].description);
            //console.log("In count_cmd 2\n");
        
break;
case 8:

            randomCommand($$[$0].name, $$[$0].output, $$[$0].description);
            //console.log('In first rule for rand cmd');
        
break;
case 9:

            randomCommand($$[$0].name, $$[$0].output, $$[$0].description);
            //console.log('In second rule for rand cmd');
        
break;
case 10:

            pictureCommand($$[$0].name, $$[$0].output, $$[$0].url, $$[$0].description);
           //console.log('In first rule for picture cmd');
        
break;
case 11:

            pictureCommand($$[$0].name, $$[$0].output, $$[$0].url, $$[$0].description);
            //console.log('In second rule for picture cmd');
        
break;
case 12:

        this.$ = {name: $$[$0-6], output: $$[$0-4], description: $$[$0-2]};
        //console.log('In first norm command rule');
    
break;
case 13:

        this.$ = {name: $$[$0-4], output: $$[$0-2], descrption: ""};
    
break;
case 14:

        this.$ = {name: $$[$0-8], output1: $$[$0-6], output2: $$[$0-4], description: $$[$0-2]};
    
break;
case 15:

        this.$ = {name: $$[$0-6], output1: $$[$0-4], output2: $$[$0-2], description: ""};
    
break;
case 16:

        this.$ = {name: $$[$0-6], output: $$[$0-4], description: $$[$0-2]};
    
break;
case 17:

        this.$ = {name: $$[$0-4], output: $$[$0-2], description: ""};
    
break;
case 18:

        this.$ = {name: $$[$0-8], output: $$[$0-6], url: $$[$0-4], description: $$[$0-2]};
    
break;
case 19:

        this.$ = {name: $$[$0-6], output: $$[$0-4], url: $$[$0-2], description: $$[$0-6]};
    
break;
case 20:

                this.$ = {tok: $$[$0-3], cli: $$[$0-2], gui: $$[$0-1]};
            
break;
case 21:

                let tokenPtr;
                tokenPtr = $$[$0-1];
                /*console.log(tokenPtr);*/
                this.$ = tokenPtr;
            
break;
case 22:

                let clientPtr;
                clientPtr = $$[$0-1];
                /*console.log(clientPtr);*/
                this.$ = clientPtr;
             
break;
case 23:

                let guildPtr;
                guildPtr = $$[$0-1];
                /*console.log(guildPtr);*/
                this.$ = guildPtr;
             
break;
case 25:

                let vector = [$$[$0-1], $$[$0]]
                this.$ = vector
            
break;
case 26:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 27:
console.log("HIT THE END OF A LINE");line_number = line_number + 1;
break;
case 28: case 29:
this.$ = yytext;
break;
}
},
table: [{3:1,4:2,28:[1,3]},{1:[3]},{5:4,6:5,7:[1,6],36:$V0},{8:[1,8]},{6:9,36:$V0},{1:[2,2]},{8:[1,10]},{23:[1,11]},{9:[1,12]},{1:[2,1]},{9:[1,13]},{1:[2,24]},{29:14,32:[1,15]},{10:16,12:17,13:18,14:19,15:20,16:$V1,24:$V2,25:$V3,27:$V4},{30:25,34:[1,26]},{33:[1,27]},{11:[1,28],12:29,13:30,14:31,15:32,16:$V1,24:$V2,25:$V3,27:$V4},o($V5,[2,4]),o($V5,[2,6]),o($V5,[2,8]),o($V5,[2,10]),{17:[1,33]},{17:[1,34]},{17:[1,35]},{17:[1,36]},{31:37,35:[1,38]},{33:[1,39]},{20:40,39:$V6},{36:[2,3]},o($V5,[2,5]),o($V5,[2,7]),o($V5,[2,9]),o($V5,[2,11]),{18:42,40:$V7},{18:44,40:$V7},{18:45,40:$V7},{18:46,40:$V7},{11:[1,47]},{33:[1,48]},{20:49,39:$V6},{23:[1,50]},o([21,22,23,39],[2,28]),{19:[1,51]},{19:[2,29]},{19:[1,52]},{19:[1,53]},{19:[1,54]},o([7,36],[2,20]),{20:55,39:$V6},{23:[1,56]},{34:[2,21]},{20:57,39:$V6},{20:58,39:$V6},{20:60,26:59,39:$V6},{20:61,39:$V6},{23:[1,62]},{35:[2,22]},{21:[1,63],22:[1,64]},{21:[1,65]},{20:68,21:[1,66],22:[1,67],39:$V6},{20:69,39:$V6},{21:[1,70]},{11:[2,23]},{20:71,39:$V6},{23:[1,72]},{20:73,39:$V6},{20:74,39:$V6},{23:[1,75]},o($V8,[2,26]),o($V8,[2,25]),{20:76,39:$V6},{22:[1,77]},o($V5,[2,13]),{21:[1,78],22:[1,79]},{22:[1,80]},o($V5,[2,17]),{21:[1,81],22:[1,82]},{23:[1,83]},{20:84,39:$V6},{23:[1,85]},{23:[1,86]},{20:87,39:$V6},{23:[1,88]},o($V5,[2,12]),{22:[1,89]},o($V5,[2,15]),o($V5,[2,16]),{22:[1,90]},o($V5,[2,19]),{23:[1,91]},{23:[1,92]},o($V5,[2,14]),o($V5,[2,18])],
defaultActions: {5:[2,2],9:[2,1],11:[2,24],28:[2,3],43:[2,29],50:[2,21],56:[2,22],62:[2,23]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const fs = require('node:fs');
    const path = require('node:path');    

    function begin(token)
    {
        const fs = require('node:fs');
        const path = require('node:path');
        const {Client, Collection, Events, GatewayIntentBits} = require('discord.js');
        const prefix = '/';
        const client = new Client({intents: [GatewayIntentBits.Guilds]});

        client.commands = new Collection();

        const foldersPath = path.join(__dirname, 'commands');
        const commandFolders = fs.readdirSync(foldersPath);

        for (const folder of commandFolders)
        {
            const commandsPath = path.join(foldersPath, folder);
            const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
            for (const file of commandFiles)
            {
                const filePath = path.join(commandsPath, file);
                const command = require(filePath);
                if ('data' in command && 'execute' in command)
                {
                    client.commands.set(command.data.name, command);
                }
                else
                {
                    //console.log('[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.');
                }
            }
        }

        client.once(Events.ClientReady, readyClient =>
        {
            console.log('Bot successfully logged in.');
            console.log('Press q to stop.');
            //console.log('Ready! logged in as ${readyClient.user.tag}');
        });

        client.on(Events.InteractionCreate, async interaction =>
        {
            if (!interaction.isChatInputCommand()) return;
            const command = interaction.client.commands.get(interaction.commandName);
            if (!command)
            {
                console.error('No command matching ${interaction.commandName} was found.');
                return;
            }

            try
            {
                await command.execute(interaction);
            }
            catch (error)
            {
                console.error(error);
                if (interaction.replied || interaction.deferred)
                {
                    await interaction.followUp({content: 'There was an error while executing this command!', ephemeral: true});
                }
                else
                {
                    await interaction.reply({content: 'There was an error while executing this command!', ephemeral:true});
                }
            }
        });

        process.stdin.setRawMode(true);
        process.stdin.resume();
        process.stdin.setEncoding('utf8');

        process.stdin.on('data', async (key) => {
            if (key == 'q') {
                console.log('Shutting down...');
                client.destroy();
                process.exit();
            }
        });        

        client.login(token);
    }

    function deploy(clientId, guildId, token)
    {
        const {REST, Routes} = require('discord.js');
        const fs = require('node:fs');
        const path = require('node:path');

        const commands = [];
        const foldersPath = path.join(__dirname, 'commands');
        const commandFolders = fs.readdirSync(foldersPath);

        for (const folder of commandFolders)
        {
            const commandsPath = path.join(foldersPath, folder);
            const commandFiles= fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
            for (const file of commandFiles) {
                const filePath = path.join(commandsPath, file);
                const command = require(filePath);
                if ('data' in command && 'execute' in command) 
                {
                    commands.push(command.data.toJSON());                    }
                else
                {
                    //console.log('[WARNING The command at ${filePath} is missing a required "data" or "execute" property.');
                }
            }
        }

        const rest = new REST().setToken(token);

        (async () => {
            try {
                    //console.log('Started refreshing ${commands.length} application (/) commands.');
                    const data = await rest.put(
                        Routes.applicationGuildCommands(clientId, guildId),
                    {body: commands},
            );

            //console.log('Successfully reloaded ${data.length} application (/) commands.');
            } catch (error) {
                console.error(error);
            }
        })();
    }

    function normalCommand(name, output, description)
    {
        let out =
        "const { SlashCommandBuilder } = require('discord.js');\n\n"
        + "module.exports = {\n"
        + "\t data: new SlashCommandBuilder()\n"
        + "\t\t.setName(\"" + name + "\")\n"
        + "\t\t.setDescription(\"" + description + "\"),\n"
        + "\tasync execute(interaction) {\n"
        + "\t\tawait interaction.reply( \"" + output + "\");\n"
        + "\t},\n"
        + "};";

        const dirPath = "commands/utility/";
        const filePath = path.join(dirPath, name + ".js");

        if (!fs.existsSync(dirPath))
        {
            fs.mkdirSync(dirPath, {recursive: true});
        } 
        fs.writeFileSync(filePath, out);
    }
    function countCommand(name, output1, output2, description)
    {
        let out =
        "const { SlashCommandBuilder } = require('discord.js');\n"
        + "const { QuickDB } = require ('quick.db');\n"
        + "const db = new QuickDB();\n\n"
        + "module.exports = {\n"
        + "\t data: new SlashCommandBuilder()\n"
        + "\t\t.setName(\"" + name + "\")\n"
        + "\t\t.setDescription(\"" + description + "\"),\n"
        + "\tasync execute(interaction) {\n"
        + "\t\tconst exists = await db.has(\"" + name + "\");\n"
        + "\t\tif (!exists) { await db.set(\"" + name + "\", 0) }\n"
        + "\t\tawait db.add(\"" + name + "\", 1);\n\n"
        + "\t\tconst timesUsed = await db.get(\"" + name + "\");\n"
        + "\t\tawait interaction.reply(\"" + output1 + "\" + timesUsed + \"" + output2 + "\");\n"
        + "\t},\n"
        + "};";

        const dirPath = "commands/utility/";
        const filePath = path.join(dirPath, name + ".js");
    
        if (!fs.existsSync(dirPath))
        {
            fs.mkdirSync(dirPath, {recursive: true});
        }
        fs.writeFileSync(filePath, out);
    }
    function randomCommand(name, output, description)
    {
        outputValues = JSON.stringify(output);

        let out =
        "const { SlashCommandBuilder } = require('discord.js');\n\n"
        + "module.exports = {\n"
        + "\t data: new SlashCommandBuilder()\n"
        + "\t\t.setName(\"" + name + "\")\n"
        + "\t\t.setDescription(\"" + description + "\"),\n"
        + "\tasync execute(interaction) {\n"
        + "\t\tlet output = " + outputValues + ";\n"
        + "\t\tlet ind = Math.floor(Math.random() * output.length);\n"
        + "\t\tlet val = output[ind];\n"
        + "\t\tawait interaction.reply( \"" + "\" + val + \"" + "\");\n"
        + "\t},\n"
        + "};";

        const dirPath = "commands/utility/";
        const filePath = path.join(dirPath, name + ".js");

        if (!fs.existsSync(dirPath))
        {
            fs.mkDirSync(dirPath, {recursive: true});
        }
        fs.writeFileSync(filePath, out);
    }
    function pictureCommand(name, output, url, description)
    {
        let out =
        "const { SlashCommandBuilder } = require('discord.js');\n\n"
        + "module.exports = {\n"
        + "\t data: new SlashCommandBuilder()\n"
        + "\t\t.setName(\"" + name + "\")\n"
        + "\t\t.setDescription(\"" + description + "\"),\n"
        + "\tasync execute(interaction) {\n"
        + "\t\tawait interaction.reply({\n"
        + "\t\t\tcontent: \"" + output + "\",\n"
        + "\t\t\tfiles: [\"" + url + "\" ]\n"
        + "\t\t});\n"
        + "\t},\n"
        + "};";

        const dirPath = "commands/utility/";
        const filePath = path.join(dirPath, name + ".js");

        if (!fs.existsSync(dirPath))
        {
            fs.mkDirSync(dirPath, {recursive: true});
        }
        fs.writeFileSync(filePath, out);
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skips whitespace*/
break;
case 1:return 38
break;
case 2:return 36
break;
case 3:return 7
break;
case 4:return 16
break;
case 5:return 25
break;
case 6:return 24
break;
case 7:return 27
break;
case 8:return 34
break;
case 9:return 35
break;
case 10:return 32
break;
case 11:return 28
break;
case 12:return 19
break;
case 13:return 22
break;
case 14:return 9
break;
case 15:return 11
break;
case 16:return 21
break;
case 17:return 23
break;
case 18:return 8
break;
case 19:return 33
break;
case 20:return 17
break;
case 21:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 39
break;
case 22:/*ignore comments*/
break;
case 23:return 40 /*identifiers must start with a letter then can have 0 or more letters/numbers after that*/
break;
case 24:/*i think this has to be sunset cause having stuff
break;
case 25:other than T_ID and T_STRING.. could be a problem but maye i could make tokens surrounded in single quotes or something idk.. actually i think thats dumb i think treating tokens etc as strings makes more sense*/
break;
case 26:return 'EOF'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\\n)/,/^(?:start\b)/,/^(?:commands\b)/,/^(?:norm\b)/,/^(?:rand\b)/,/^(?:count\b)/,/^(?:picture\b)/,/^(?:client\b)/,/^(?:guild\b)/,/^(?:token\b)/,/^(?:init\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:=)/,/^(?:\.)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:#(.*)\n)/,/^(?:[a-zA-Z][a-zA-Z0-9]*)/,/^(?:)/,/^(?:)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lang;
exports.Parser = lang.Parser;
exports.parse = function () { return lang.parse.apply(lang, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}